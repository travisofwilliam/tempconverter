{"ast":null,"code":"var _jsxFileName = \"/Users/traviswilliams/Desktop/tempconverter/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Head from 'next/head';\n\nconst Index = () => {\n  const {\n    0: input,\n    1: setInput\n  } = useState('');\n  const {\n    0: unit,\n    1: setUnit\n  } = useState('');\n  const {\n    0: conversionUnit,\n    1: setConversionUnit\n  } = useState('');\n  const {\n    0: result,\n    1: setResult\n  } = useState(undefined);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: unitBtn,\n    1: setUnitBtn\n  } = useState('btn-info');\n  const {\n    0: conversionBtn,\n    1: setConversionBtn\n  } = useState('btn-info');\n\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleUnitChange = e => {\n    setUnit(e.target.value);\n    setUnitBtn('btn-success');\n  };\n\n  const handleConversionUnitChange = e => {\n    setConversionUnit(e.target.value);\n    setConversionBtn('btn-success');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isNaN(input) || input === '') {\n      setErrorMessage('Please enter a tempterature to convert. Temperature must only contain integers.');\n    } else if (unit === '') {\n      setErrorMessage('Please select a valid unit of measurement');\n    } else if (conversionUnit === '') {\n      setErrorMessage('Please select a valid conversion unit');\n    } else {\n      if (unit === 'kelvin') {\n        if (conversionUnit === 'farenheit') {\n          var resultKF = (parseInt(input) - 273) * (9 / 5) + 35;\n          setResult(resultKF.toFixed(0));\n        } else if (conversionUnit === 'celsius') {\n          var resultKC = parseInt(input) - 273.15;\n          setResult(resultKC.toFixed(0));\n        } else if (conversionUnit === 'kelvin') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!');\n        }\n      } else if (unit === 'farenheit') {\n        if (conversionUnit === 'celsius') {\n          var resultFC = (parseInt(input) - 32) * 5 / 9;\n          setResult(resultFC.toFixed(0));\n        } else if (conversionUnit === 'kelvin') {\n          var resultFK = (parseInt(input) - 32) * 5 / 9 + 5;\n          setResult(resultFK.toFixed(0));\n        } else if (conversionUnit === 'farenheit') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!');\n        }\n      } else if (unit === 'celsius') {\n        if (conversionUnit === 'farenheit') {\n          var resultCF = parseInt(input) * 9 / 5 + 32;\n          setResult(resultCF.toFixed(0));\n        } else if (conversionUnit === 'kelvin') {\n          var resultCK = parseInt(input) + 273.15;\n          setResult(resultCK.toFixed(2));\n        } else if (conversionUnit === 'celsius') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!');\n        }\n      }\n    } // setInput('')\n\n  };\n\n  return __jsx(\"div\", {\n    className: \"container text-center mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://bootswatch.com/4/pulse/bootstrap.min.css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"jumbotron\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: \"display-5\",\n    style: {\n      objectFit: 'scale-down'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Temperature Converter\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Convert:\"), __jsx(\"input\", {\n    className: \"mb-3\",\n    value: input,\n    onChange: handleInputChange,\n    type: \"text\",\n    placeholder: \"Enter Temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), __jsx(\"select\", {\n    className: `mb-3 dropdown p-3 ${unitBtn}`,\n    value: unit,\n    onChange: handleUnitChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"--Select Unit of Measure--\"), __jsx(\"option\", {\n    value: \"farenheit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Farenheit\"), __jsx(\"option\", {\n    value: \"celsius\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Celsius\"), __jsx(\"option\", {\n    value: \"kelvin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Kelvin\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"To: \"), __jsx(\"select\", {\n    className: `mb-3 dropdown ${conversionBtn}`,\n    value: conversionUnit,\n    onChange: handleConversionUnitChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"--Select a Unit of Measure--\"), __jsx(\"option\", {\n    value: \"farenheit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Farenheit\"), __jsx(\"option\", {\n    value: \"celsius\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Celsius\"), __jsx(\"option\", {\n    value: \"kelvin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Kelvin\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    className: \"btn btn-primary mb-3\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Convert Temperature\")), !isNaN(result) ? __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 28\n    }\n  }, result + 'Â°') : errorMessage));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/traviswilliams/Desktop/tempconverter/pages/index.js"],"names":["useState","Head","Index","input","setInput","unit","setUnit","conversionUnit","setConversionUnit","result","setResult","undefined","errorMessage","setErrorMessage","unitBtn","setUnitBtn","conversionBtn","setConversionBtn","handleInputChange","e","target","value","handleUnitChange","handleConversionUnitChange","handleSubmit","preventDefault","isNaN","resultKF","parseInt","toFixed","resultKC","resultFC","resultFK","resultCF","resultCK","objectFit"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport Head from 'next/head'\n\nconst Index = () => {\n\n  const [input, setInput] = useState('')\n  const [unit, setUnit] = useState('')\n  const [conversionUnit, setConversionUnit] = useState('')\n  const [result, setResult] = useState(undefined)\n  const [errorMessage, setErrorMessage] = useState('')\n  const [unitBtn, setUnitBtn] = useState('btn-info')\n  const [conversionBtn, setConversionBtn] = useState('btn-info')\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value)\n  }\n\n  const handleUnitChange = (e) => {\n    setUnit(e.target.value)\n    setUnitBtn('btn-success')\n  }\n\n  const handleConversionUnitChange = (e) => {\n    setConversionUnit(e.target.value)\n    setConversionBtn('btn-success')\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (isNaN(input) || input === '') {\n      setErrorMessage('Please enter a tempterature to convert. Temperature must only contain integers.')\n    } else if (unit === '') {\n      setErrorMessage('Please select a valid unit of measurement')\n    } else if (conversionUnit === '') {\n      setErrorMessage('Please select a valid conversion unit')\n    } else {\n      if (unit === 'kelvin') {\n        if (conversionUnit === 'farenheit') {\n          var resultKF = ((parseInt(input) - 273) * (9 / 5) + 35)\n          setResult(resultKF.toFixed(0))\n        } else if (conversionUnit === 'celsius') {\n          var resultKC = parseInt(input) - 273.15\n          setResult(resultKC.toFixed(0))\n        } else if (conversionUnit === 'kelvin') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!')\n        }\n      } else if (unit === 'farenheit') {\n        if (conversionUnit === 'celsius') {\n          var resultFC = ((parseInt(input) - 32) * 5 / 9)\n          setResult(resultFC.toFixed(0))\n        } else if (conversionUnit === 'kelvin') {\n          var resultFK = ((parseInt(input) - 32) * 5 / 9) + 5\n          setResult(resultFK.toFixed(0))\n        } else if (conversionUnit === 'farenheit') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!')\n        }\n      } else if (unit === 'celsius') {\n        if (conversionUnit === 'farenheit') {\n          var resultCF = ((parseInt(input) * 9 / 5) + 32)\n          setResult(resultCF.toFixed(0))\n        } else if (conversionUnit === 'kelvin') {\n          var resultCK = (parseInt(input) + 273.15)\n          setResult(resultCK.toFixed(2))\n        } else if (conversionUnit === 'celsius') {\n          setErrorMessage('Warning: Original temperature unit and conversion unit can not be the same!')\n        }\n      }\n    }\n    // setInput('')\n  }\n\n  return (\n    <div className='container text-center mx-auto'>\n      <Head>\n        <link rel=\"stylesheet\" href=\"https://bootswatch.com/4/pulse/bootstrap.min.css\" />\n      </Head>\n      <div className=\"jumbotron\">\n        <form onSubmit={handleSubmit}>\n          <h1 className=\"display-5\" style={{ objectFit: 'scale-down' }}>Temperature Converter</h1>\n          <p>Convert:</p>\n          <input\n            className='mb-3'\n            value={input}\n            onChange={handleInputChange}\n            type=\"text\"\n            placeholder='Enter Temperature'\n          />\n          <br />\n          <select className={`mb-3 dropdown p-3 ${unitBtn}`} value={unit} onChange={handleUnitChange}>\n            <option value=\"\">--Select Unit of Measure--</option>\n            <option value=\"farenheit\">Farenheit</option>\n            <option value=\"celsius\">Celsius</option>\n            <option value=\"kelvin\">Kelvin</option>\n          </select>\n          <br />\n          <p>To: </p>\n          <select className={`mb-3 dropdown ${conversionBtn}`} value={conversionUnit} onChange={handleConversionUnitChange}>\n            <option value=\"\">--Select a Unit of Measure--</option>\n            <option value=\"farenheit\">Farenheit</option>\n            <option value=\"celsius\">Celsius</option>\n            <option value=\"kelvin\">Kelvin</option>\n          </select>\n          <br />\n          <button className='btn btn-primary mb-3' type='submit'>Convert Temperature</button>\n        </form>\n        {\n          !isNaN(result) ? <h3>{result + 'Â°'}</h3> : errorMessage\n        }\n      </div>\n\n    </div>\n  )\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}